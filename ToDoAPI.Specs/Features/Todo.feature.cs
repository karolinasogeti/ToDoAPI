// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace ToDoAPI.Specs.Features
{
    using Reqnroll;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class HanteraTodosFeature : object, Xunit.IClassFixture<HanteraTodosFeature.FixtureData>, Xunit.IAsyncLifetime
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private static global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new System.Globalization.CultureInfo("sv"), "Features", "Hantera todos", "  Som användare vill jag kunna hantera mina todos så att jag kan hålla koll på va" +
                "d som ska göras", global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "Todo.feature"
#line hidden
        
        public HanteraTodosFeature(HanteraTodosFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
        }
        
        public static async System.Threading.Tasks.Task FeatureSetupAsync()
        {
        }
        
        public static async System.Threading.Tasks.Task FeatureTearDownAsync()
        {
        }
        
        public async System.Threading.Tasks.Task TestInitializeAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(featureHint: featureInfo);
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Equals(featureInfo) == false)))
            {
                await testRunner.OnFeatureEndAsync();
            }
            if ((testRunner.FeatureContext == null))
            {
                await testRunner.OnFeatureStartAsync(featureInfo);
            }
        }
        
        public async System.Threading.Tasks.Task TestTearDownAsync()
        {
            await testRunner.OnScenarioEndAsync();
            global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public async System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
        {
            await this.TestInitializeAsync();
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
        {
            await this.TestTearDownAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Visa tom todo-lista")]
        [Xunit.TraitAttribute("FeatureTitle", "Hantera todos")]
        [Xunit.TraitAttribute("Description", "Visa tom todo-lista")]
        public async System.Threading.Tasks.Task VisaTomTodo_Lista()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Visa tom todo-lista", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 6
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 7
 await testRunner.GivenAsync("att todo-listan är tom", ((string)(null)), ((global::Reqnroll.Table)(null)), "Givet ");
#line hidden
#line 8
 await testRunner.WhenAsync("jag öppnar todo-appen", ((string)(null)), ((global::Reqnroll.Table)(null)), "När ");
#line hidden
#line 9
 await testRunner.ThenAsync("ska jag se att listan är tom", ((string)(null)), ((global::Reqnroll.Table)(null)), "Så ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Lägga till en ny todo")]
        [Xunit.TraitAttribute("FeatureTitle", "Hantera todos")]
        [Xunit.TraitAttribute("Description", "Lägga till en ny todo")]
        public async System.Threading.Tasks.Task LaggaTillEnNyTodo()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Lägga till en ny todo", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 11
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 12
 await testRunner.GivenAsync("att todo-listan är tom", ((string)(null)), ((global::Reqnroll.Table)(null)), "Givet ");
#line hidden
#line 13
 await testRunner.WhenAsync("jag lägger till en ny todo med titeln \"Handla mjölk\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "När ");
#line hidden
#line 14
 await testRunner.ThenAsync("ska todo-listan innehålla en todo med titeln \"Handla mjölk\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Så ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Lägga till en ny todo med exempel")]
        [Xunit.TraitAttribute("FeatureTitle", "Hantera todos")]
        [Xunit.TraitAttribute("Description", "Lägga till en ny todo med exempel")]
        [Xunit.InlineDataAttribute("\"Handla mjölk\"", new string[0])]
        [Xunit.InlineDataAttribute("\"Laga mat\"", new string[0])]
        [Xunit.InlineDataAttribute("\"Städa\"", new string[0])]
        public async System.Threading.Tasks.Task LaggaTillEnNyTodoMedExempel(string titel, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("titel", titel);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Lägga till en ny todo med exempel", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 16
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 17
 await testRunner.GivenAsync("att todo-listan är tom", ((string)(null)), ((global::Reqnroll.Table)(null)), "Givet ");
#line hidden
#line 18
 await testRunner.WhenAsync(string.Format("jag lägger till en ny todo med titeln {0}", titel), ((string)(null)), ((global::Reqnroll.Table)(null)), "När ");
#line hidden
#line 19
 await testRunner.ThenAsync(string.Format("ska todo-listan innehålla en todo med titeln {0}", titel), ((string)(null)), ((global::Reqnroll.Table)(null)), "Så ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Markera en todo som klar")]
        [Xunit.TraitAttribute("FeatureTitle", "Hantera todos")]
        [Xunit.TraitAttribute("Description", "Markera en todo som klar")]
        public async System.Threading.Tasks.Task MarkeraEnTodoSomKlar()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Markera en todo som klar", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 27
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 28
 await testRunner.GivenAsync("att todo-listan innehåller en todo med titeln \"Handla mjölk\" som inte är klar", ((string)(null)), ((global::Reqnroll.Table)(null)), "Givet ");
#line hidden
#line 29
 await testRunner.WhenAsync("jag markerar todo:n \"Handla mjölk\" som klar", ((string)(null)), ((global::Reqnroll.Table)(null)), "När ");
#line hidden
#line 30
 await testRunner.ThenAsync("ska todo:n \"Handla mjölk\" vara markerad som klar", ((string)(null)), ((global::Reqnroll.Table)(null)), "Så ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Ta bort en todo")]
        [Xunit.TraitAttribute("FeatureTitle", "Hantera todos")]
        [Xunit.TraitAttribute("Description", "Ta bort en todo")]
        public async System.Threading.Tasks.Task TaBortEnTodo()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Ta bort en todo", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 32
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 33
 await testRunner.GivenAsync("att todo-listan innehåller en todo med titeln \"Handla mjölk\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Givet ");
#line hidden
#line 34
 await testRunner.WhenAsync("jag tar bort todo:n \"Handla mjölk\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "När ");
#line hidden
#line 35
 await testRunner.ThenAsync("ska todo-listan vara tom", ((string)(null)), ((global::Reqnroll.Table)(null)), "Så ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Lägga till flera todos")]
        [Xunit.TraitAttribute("FeatureTitle", "Hantera todos")]
        [Xunit.TraitAttribute("Description", "Lägga till flera todos")]
        public async System.Threading.Tasks.Task LaggaTillFleraTodos()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Lägga till flera todos", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 37
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 38
 await testRunner.GivenAsync("att todo-listan är tom", ((string)(null)), ((global::Reqnroll.Table)(null)), "Givet ");
#line hidden
                global::Reqnroll.Table table1 = new global::Reqnroll.Table(new string[] {
                            "titel"});
                table1.AddRow(new string[] {
                            "Handla mjölk"});
                table1.AddRow(new string[] {
                            "Laga mat"});
                table1.AddRow(new string[] {
                            "Städa"});
#line 39
 await testRunner.WhenAsync("jag lägger till följande todos", ((string)(null)), table1, "När ");
#line hidden
#line 44
 await testRunner.ThenAsync("ska todo-listan innehålla 3 todos", ((string)(null)), ((global::Reqnroll.Table)(null)), "Så ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : object, Xunit.IAsyncLifetime
        {
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
            {
                await HanteraTodosFeature.FeatureSetupAsync();
            }
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
            {
                await HanteraTodosFeature.FeatureTearDownAsync();
            }
        }
    }
}
#pragma warning restore
#endregion
